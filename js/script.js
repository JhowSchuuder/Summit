// Poema sobre o Minas Summit e minha jornada - refeito com inspira√ß√£o solicitada
const poemStanzas = [
    [
        "Do Par√° para o mundo digital,",
        "Desenvolvedor com networking especial,",
        "Comunicativo, conectado, sempre profissional,",
        "Na Amplitude ambiental, meu potencial √© exponencial!"
    ],
    [
        "Minas Summit vem a√≠, inova√ß√£o sem igual,",
        "IA em destaque, futuro global,",
        "10 mil mentes, 150 startups a brilhar,",
        "No Minascentro, vamos transformar!"
    ],
    [
        "Do Par√° trago o calor da floresta,",
        "Para Minas, tecnologia manifesta,",
        "Com part√≠culas de c√≥digo no ar,",
        "Este poema √© meu selo para ingressar!",
        "Thuane, a jornada apenas come√ßou!"

    ]
];

console.log("üöÄ Script inicialmente carregado");

// Controle de rolagem
let currentStanzaIndex = 0;
let totalStanzas = poemStanzas.length;
let autoScrollEnabled = true;
let stanzaElements = [];
let experienceStarted = false;

// Configura√ß√£o do Three.js
let scene, camera, renderer, particleGroups = [];
let mouseX = 0, mouseY = 0;
let windowHalfX = window.innerWidth / 2;
let windowHalfY = window.innerHeight / 2;

// Vari√°veis para √°udio
let audioContext, backgroundMusic, audioSource, analyser, gainNode;
let isPlaying = false;

// Esperamos que o DOM esteja completamente carregado antes de selecionar elementos
document.addEventListener('DOMContentLoaded', () => {
    console.log("üîç DOM Carregado - Selecionando elementos");
    
    // DOM Elements - Movidos para dentro do evento DOMContentLoaded
    const startButton = document.getElementById('start-button');
    const toggleMusicButton = document.getElementById('toggle-music');
    const toggleScrollButton = document.getElementById('toggle-scroll');
    const poemContainer = document.getElementById('poem-container');
    const poemElement = document.getElementById('poem');
    const authorInfo = document.querySelector('.author-info');
    const progressBar = document.getElementById('progress-bar');
    const container = document.getElementById('container');
    const welcomeScreen = document.getElementById('welcome-screen');
    const harpSound = document.getElementById('harp-sound');
    
    // Log de todos os elementos selecionados para depura√ß√£o
    console.log({
        startButton,
        toggleMusicButton,
        toggleScrollButton,
        poemContainer,
        poemElement,
        authorInfo,
        progressBar,
        container,
        welcomeScreen,
        harpSound
    });
    
    // Verificar explicitamente se o bot√£o de in√≠cio existe
    if (!startButton) {
        console.error("‚ùå ERRO: Bot√£o 'start-button' n√£o encontrado no DOM");
        return; // Sair se o elemento cr√≠tico n√£o existir
    } else {
        console.log("‚úÖ Bot√£o de in√≠cio encontrado:", startButton);
        
        // Adicionar um event listener inline para teste
        startButton.onclick = function() {
            console.log("üñ±Ô∏è Bot√£o clicado via onclick!");
            alert("Bot√£o clicado! Iniciando jornada...");
            startJourney();
        };
        
        // Tamb√©m adicionar o event listener normal para garantir
        startButton.addEventListener('click', function() {
            console.log("üñ±Ô∏è Bot√£o clicado via addEventListener!");
            startJourney();
        });
    }
    
    // Controle de rolagem autom√°tica
    if (toggleScrollButton) {
        toggleScrollButton.addEventListener('click', () => {
            autoScrollEnabled = !autoScrollEnabled;
            updateScrollButtonState();
            
            // Continuar a rolagem se a op√ß√£o estiver ativada
            if (autoScrollEnabled && currentStanzaIndex < totalStanzas) {
                scrollToStanza(currentStanzaIndex);
            }
        });
    }
    
    // Fun√ß√£o para atualizar o texto do bot√£o de rolagem
    function updateScrollButtonState() {
        if (toggleScrollButton) {
            toggleScrollButton.textContent = autoScrollEnabled ? '‚úÖ Rolagem Auto' : '‚ùå Rolagem Auto';
        }
    }
    
    if (toggleMusicButton) {
        toggleMusicButton.addEventListener('click', toggleMusic);
    }
    
    document.addEventListener('mousemove', onDocumentMouseMove);
    window.addEventListener('resize', onWindowResize);
    
    // Permitir desativar/ativar rolagem autom√°tica clicando no poema
    document.addEventListener('click', (e) => {
        if (e.target.closest('#poem') && currentStanzaIndex > 0) {
            autoScrollEnabled = !autoScrollEnabled;
            if (autoScrollEnabled && currentStanzaIndex < totalStanzas) {
                scrollToStanza(currentStanzaIndex);
            }
        }
    });
    
    // Precarregar som da harpa se o elemento existir
    if (harpSound) {
        try {
            harpSound.load();
            console.log("üîä Som de harpa pr√©-carregado");
        } catch (e) {
            console.error("‚ùå Erro ao carregar som da harpa:", e);
        }
    } else {
        console.error("‚ùå Elemento de √°udio 'harp-sound' n√£o encontrado");
    }
    
    // Fun√ß√£o para iniciar a jornada - transi√ß√£o inicial
    function startJourney() {
        console.log("üèÅ Fun√ß√£o startJourney chamada");
        
        if (experienceStarted) {
            console.log("‚ö†Ô∏è Experi√™ncia j√° iniciada, ignorando clique");
            return;
        }
        
        console.log("‚ú® Iniciando jornada");
        experienceStarted = true;
        
        // Remover a tela de boas-vindas imediatamente para simplificar
        if (welcomeScreen) {
            welcomeScreen.style.display = 'none';
        }
        
        // Iniciar experi√™ncia diretamente sem esperar transi√ß√µes
        initExperience();
    }

    // Fun√ß√£o para iniciar a experi√™ncia principal
    function initExperience() {
        console.log("üöÄ Iniciando experi√™ncia principal");
        
        // Mostrar controles de m√∫sica e rolagem
        if (toggleMusicButton) {
            toggleMusicButton.classList.remove('hidden');
        }
        
        if (toggleScrollButton) {
            toggleScrollButton.classList.remove('hidden');
            updateScrollButtonState();
        }
        
        // Inicializar Three.js com sistema de part√≠culas aprimorado
        initThree();
        
        // Anima√ß√£o para mostrar as part√≠culas
        setTimeout(() => {
            const canvas = document.querySelector('canvas');
            if (canvas) {
                console.log("üé® Tornando canvas vis√≠vel");
                canvas.classList.add('visible');
            } else {
                console.error("‚ùå Canvas n√£o encontrado");
            }
        }, 300);
        
        // Inicializar √°udio
        initAudio();
        
        // Preparar e mostrar o poema com estrutura de estrofes
        displayPoem();
        
        // Iniciar anima√ß√£o
        animate();
        
        // Mostrar o container do poema IMEDIATAMENTE
        if (poemContainer) {
            console.log("üìù Mostrando container do poema imediatamente");
            poemContainer.classList.add('visible');
            poemContainer.style.opacity = "1";
            poemContainer.style.transform = "translateY(0)";
            
            // Come√ßar a rolagem autom√°tica ap√≥s um delay
            setTimeout(() => {
                if (autoScrollEnabled) {
                    console.log("üìú Iniciando rolagem autom√°tica");
                    scrollToStanza(0);
                }
            }, 500);
        } else {
            console.error("‚ùå poemContainer √© null");
        }
    }
    
    // Fun√ß√£o para exibir o poema com estrutura de estrofes - atualizada para usar elementos do escopo local
    function displayPoem() {
        console.log("üìù Exibindo poema");
        
        if (!poemElement) {
            console.error("‚ùå poemElement n√£o encontrado");
            return;
        }
        
        poemElement.classList.remove('hidden');
        poemElement.style.display = 'flex';
        poemElement.style.opacity = '1';
        poemElement.style.visibility = 'visible';
        
        // Limpar conte√∫do existente
        poemElement.innerHTML = '';
        stanzaElements = [];
        
        // Criar cada estrofe como um elemento separado
        poemStanzas.forEach((stanza, stanzaIndex) => {
            const stanzaElement = document.createElement('div');
            stanzaElement.className = 'poem-stanza';
            stanzaElement.id = `stanza-${stanzaIndex}`;
            stanzaElement.style.opacity = '1';
            stanzaElement.style.visibility = 'visible';
            
            // Adicionar cada linha da estrofe
            stanza.forEach((line, lineIndex) => {
                const lineElement = document.createElement('p');
                lineElement.className = 'poem-line';
                lineElement.innerHTML = line;
                
                // For√ßar visibilidade para todas as linhas
                setTimeout(() => {
                    lineElement.style.opacity = '1';
                    lineElement.style.transform = 'translateY(0)';
                    lineElement.classList.add('visible');
                }, lineIndex * 100); // Pequeno delay entre as linhas
                
                stanzaElement.appendChild(lineElement);
            });
            
            poemElement.appendChild(stanzaElement);
            stanzaElements.push(stanzaElement);
        });
        
        // Mostrar informa√ß√µes do autor no final
        if (authorInfo) {
            authorInfo.classList.remove('hidden');
            authorInfo.classList.add('visible');
            authorInfo.style.opacity = '1';
        }
    }
    
    // Fun√ß√£o para rolar para uma estrofe espec√≠fica - ajustada para rolagem mais suave e lenta
    function scrollToStanza(index) {
        console.log(`üìú Rolando para estrofe ${index}`);
        
        if (index >= totalStanzas) {
            // Chegamos ao final do poema
            updateProgressBar(1);
            return;
        }
        
        currentStanzaIndex = index;
        
        // Atualizar a barra de progresso
        updateProgressBar(currentStanzaIndex / (totalStanzas - 1));
        
        // Tornar a estrofe atual vis√≠vel
        const stanza = stanzaElements[index];
        if (stanza) {
            stanza.classList.add('visible');
            
            // Rolar suavemente para a estrofe com efeito mais lento
            if (container) {
                const stanzaTop = stanza.offsetTop - 100; // Ajuste para centralizar melhor
                
                // Usar anima√ß√£o suave para rolagem mais controlada
                smoothScrollTo(container, stanzaTop, 2000); // 2 segundos para a rolagem
            } else {
                // Fallback se container n√£o existir
                stanza.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
            
            // Programar a pr√≥xima rolagem se a rolagem autom√°tica estiver ativada
            if (autoScrollEnabled && index < totalStanzas - 1) {
                // Tempo baseado no n√∫mero de linhas na estrofe atual - mais lento agora
                const linesCount = poemStanzas[index].length;
                const delay = linesCount * 4000; // 4 segundos por linha para uma leitura mais tranquila
                
                setTimeout(() => {
                    scrollToStanza(index + 1);
                }, delay);
            }
        } else {
            console.error(`‚ùå Estrofe ${index} n√£o encontrada`);
        }
    }
    
    // Fun√ß√£o para rolagem suave personalizada
    function smoothScrollTo(element, to, duration) {
        const start = element.scrollTop;
        const change = to - start;
        const increment = 20; // 20ms para frames suaves
        let currentTime = 0;
        
        function animateScroll() {
            currentTime += increment;
            const val = easeInOutQuad(currentTime, start, change, duration);
            element.scrollTop = val;
            if (currentTime < duration) {
                setTimeout(animateScroll, increment);
            }
        }
        
        // Fun√ß√£o de easing para movimento suave
        function easeInOutQuad(t, b, c, d) {
            t /= d/2;
            if (t < 1) return c/2*t*t + b;
            t--;
            return -c/2 * (t*(t-2) - 1) + b;
        }
        
        animateScroll();
    }
    
    // Atualizar a barra de progresso
    function updateProgressBar(percentage) {
        if (progressBar) {
            progressBar.style.width = `${percentage * 100}%`;
        }
    }
});

// Estas fun√ß√µes precisam ser globais
function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    
    // Verificar se camera e renderer est√£o definidos antes de usar
    if (camera && renderer) {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        console.log("üîÑ Janela redimensionada com sucesso");
    }
}

function onDocumentMouseMove(event) {
    mouseX = (event.clientX - windowHalfX) * 0.05;
    mouseY = (event.clientY - windowHalfY) * 0.05;
}

// Inicializar Three.js com sistema de part√≠culas melhorado
function initThree() {
    try {
        console.log("üé® Inicializando Three.js");
        
        // Cena
        scene = new THREE.Scene();
        
        // C√¢mera com perspectiva
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
        camera.position.z = 1000;
        
        // Renderer com anti-aliasing
        renderer = new THREE.WebGLRenderer({ 
            alpha: true,
            antialias: true 
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        
        // Adicionar classe three-canvas e definir visibilidade imediatamente
        const threeCanvas = renderer.domElement;
        threeCanvas.classList.add('three-canvas');
        threeCanvas.classList.add('visible');
        threeCanvas.style.opacity = '1'; // For√ßar visibilidade
        document.body.appendChild(threeCanvas);
        
        // Criar m√∫ltiplos grupos de part√≠culas para efeitos diferentes
        createParticleSystem();
        
        console.log("‚úÖ Three.js inicializado com sucesso");
    } catch (error) {
        console.error("‚ùå Erro ao inicializar Three.js:", error);
    }
}

// Criar sistema de part√≠culas com m√∫ltiplas camadas
function createParticleSystem() {
    console.log("‚ú® Criando sistema de part√≠culas");
    
    try {
        // Grupo 1: Part√≠culas principais (azuis)
        createParticleGroup({
            count: 1000,
            size: 5,
            spread: 2000,
            color: 0x00c9ff,
            opacity: 0.7,
            speedFactor: 1
        });
        
        // Grupo 2: Part√≠culas secund√°rias (menores, brancas)
        createParticleGroup({
            count: 500,
            size: 2,
            spread: 1500,
            color: 0xffffff,
            opacity: 0.5,
            speedFactor: 0.5
        });
        
        // Grupo 3: Part√≠culas de destaque (verdes)
        createParticleGroup({
            count: 200,
            size: 3,
            spread: 1800,
            color: 0x92fe9d,
            opacity: 0.8,
            speedFactor: 1.5
        });
        
        console.log(`‚úÖ Sistema de part√≠culas criado com ${particleGroups.length} grupos`);
    } catch (error) {
        console.error("‚ùå Erro ao criar sistema de part√≠culas:", error);
    }
}

// Fun√ß√£o para criar um grupo de part√≠culas com par√¢metros espec√≠ficos
function createParticleGroup(params) {
    try {
        const geometry = new THREE.BufferGeometry();
        const vertices = [];
        const sizes = [];
        
        for (let i = 0; i < params.count; i++) {
            const x = (Math.random() - 0.5) * params.spread;
            const y = (Math.random() - 0.5) * params.spread;
            const z = (Math.random() - 0.5) * params.spread;
            
            vertices.push(x, y, z);
            sizes.push(params.size * (Math.random() * 0.5 + 0.5));
        }
        
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));
        
        const material = new THREE.PointsMaterial({
            size: params.size,
            color: params.color,
            transparent: true,
            opacity: params.opacity,
            blending: THREE.AdditiveBlending,
            sizeAttenuation: true
        });
        
        const particleGroup = {
            particles: new THREE.Points(geometry, material),
            speedFactor: params.speedFactor,
            rotationDirection: Math.random() > 0.5 ? 1 : -1
        };
        
        scene.add(particleGroup.particles);
        particleGroups.push(particleGroup);
    } catch (error) {
        console.error("‚ùå Erro ao criar grupo de part√≠culas:", error);
    }
}

// Fun√ß√£o de anima√ß√£o aprimorada
function animate() {
    requestAnimationFrame(animate);
    
    if (!scene || !camera || !renderer) {
        console.warn("‚ö†Ô∏è Scene, camera ou renderer n√£o est√£o definidos");
        return;
    }
    
    try {
        // Animar cada grupo de part√≠culas de forma independente
        particleGroups.forEach((group, index) => {
            group.particles.rotation.x += 0.0003 * group.speedFactor * group.rotationDirection;
            group.particles.rotation.y += 0.0005 * group.speedFactor * group.rotationDirection;
            group.particles.rotation.z += 0.0002 * group.speedFactor;
        });
        
        // Efeito parallax com a c√¢mera
        camera.position.x += (mouseX - camera.position.x) * 0.05;
        camera.position.y += (-mouseY - camera.position.y) * 0.05;
        camera.lookAt(scene.position);
        
        // Analisar √°udio e atualizar visualiza√ß√£o se estiver tocando
        if (isPlaying && analyser) {
            const dataArray = new Uint8Array(analyser.frequencyBinCount);
            analyser.getByteFrequencyData(dataArray);
            
            // Calcular m√©dia do volume para influenciar as part√≠culas
            const average = dataArray.reduce((a, b) => a + b, 0) / dataArray.length;
            const normalizedAverage = average / 256;
            
            // Aplicar efeitos baseados em √°udio a cada grupo de part√≠culas
            particleGroups.forEach((group, index) => {
                const positions = group.particles.geometry.attributes.position.array;
                const sizes = group.particles.geometry.attributes.size.array;
                
                for (let i = 0; i < sizes.length; i++) {
                    // Ajustar tamanho das part√≠culas com base no √°udio
                    sizes[i] = (4 + index) * (Math.random() * 0.5 + 0.5) * (1 + normalizedAverage);
                    
                    // Aplicar movimento baseado em frequ√™ncias diferentes para cada grupo
                    const frequencyBand = Math.floor(i % dataArray.length);
                    const frequencyValue = dataArray[frequencyBand] / 256;
                    
                    if (frequencyValue > 0.5) {  // Apenas part√≠culas afetadas por frequ√™ncias altas
                        const index3 = i * 3;
                        const moveFactor = frequencyValue * group.speedFactor * 0.5;
                        
                        positions[index3] += (Math.random() - 0.5) * moveFactor;
                        positions[index3 + 1] += (Math.random() - 0.5) * moveFactor;
                        positions[index3 + 2] += (Math.random() - 0.5) * moveFactor;
                    }
                }
                
                group.particles.geometry.attributes.position.needsUpdate = true;
                group.particles.geometry.attributes.size.needsUpdate = true;
            });
        }
        
        renderer.render(scene, camera);
    } catch (error) {
        console.error("‚ùå Erro na fun√ß√£o de anima√ß√£o:", error);
    }
}

// Inicializar √°udio
function initAudio() {
    try {
        console.log("üéµ Inicializando √°udio");
        
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        backgroundMusic = new Audio('midia/musicafundo.mp3');
        backgroundMusic.loop = true;
        
        audioSource = audioContext.createMediaElementSource(backgroundMusic);
        analyser = audioContext.createAnalyser();
        gainNode = audioContext.createGain();
        
        audioSource.connect(analyser);
        analyser.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        analyser.fftSize = 256;
        gainNode.gain.value = 0.5;
        
        // Iniciar m√∫sica quando tudo estiver pronto
        toggleMusic();
        
        console.log("‚úÖ √Åudio inicializado com sucesso");
    } catch (error) {
        console.error("‚ùå Erro ao inicializar √°udio:", error);
    }
}

// Alternar m√∫sica ligada/desligada
function toggleMusic() {
    console.log("üéµ Alternando m√∫sica");
    
    if (audioContext && backgroundMusic) {
        if (audioContext.state === 'suspended') {
            audioContext.resume();
        }
        
        if (!isPlaying) {
            backgroundMusic.play()
                .then(() => {
                    isPlaying = true;
                    const toggleMusicButton = document.getElementById('toggle-music');
                    if (toggleMusicButton) {
                        toggleMusicButton.textContent = 'üîä M√∫sica';
                    }
                    console.log("‚úÖ M√∫sica iniciada");
                })
                .catch(error => {
                    console.error("‚ùå Erro ao iniciar √°udio:", error);
                    isPlaying = false;
                    const toggleMusicButton = document.getElementById('toggle-music');
                    if (toggleMusicButton) {
                        toggleMusicButton.textContent = 'üîá M√∫sica';
                    }
                });
        } else {
            backgroundMusic.pause();
            isPlaying = false;
            const toggleMusicButton = document.getElementById('toggle-music');
            if (toggleMusicButton) {
                toggleMusicButton.textContent = 'üîá M√∫sica';
            }
            console.log("‚è∏Ô∏è M√∫sica pausada");
        }
    } else {
        console.error("‚ùå audioContext ou backgroundMusic n√£o est√£o definidos");
    }
}